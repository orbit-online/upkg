#!/usr/bin/env bash
# shellcheck source-path=..
set -Eeo pipefail; shopt -s inherit_errexit nullglob

PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")

# variable name conventions
# pkgtype: The package type (tar, file, or git)
# pkgpath: The path to a package root
# pkgname: The effective name of a package in .upkg/
# dedup_path: The path to a deduplicated package as seen from .upkg/
# dedup_name: The name of a package in .upkg/packages/
# dedup_pkgname: The name of a package without the @<checksum> part in .upkg/.packages/
# checksum: The sha1 (if pkgtype=git) or sha256 (otherwise) hash of the package
# archiveext: The extension of an archive including the starting dot. e.g. ".tar.gz"
# dep: The full JSON object for a dependency
# command: Basename of an executable file

# shellcheck disable=SC2154
upkg() {
  [[ ! $BASH_VERSION =~ ^[0-3]|^4\.[0-3] ]] || fatal "upkg requires bash >= v4.4"
  # Make sure we have jq available, git and tar are optional and we let them fail once we get there
  type "jq" >/dev/null 2>&1 || fatal "command not found: 'jq'"
  export GIT_TERMINAL_PROMPT=0 GIT_SSH_COMMAND=${GIT_SSH_COMMAND:-"ssh -oBatchMode=yes"}
  DOC="Î¼pkg - A minimalist package manager
Usage:
  upkg install [-nqv]
  upkg add [-qvgXB -b PATH... -p PKGNAME -t PKGTYPE] (URL|PATH) [SHA]
  upkg remove [-nqvg] PKGNAME
  upkg list [-qvg] [-- COLUMNOPTS...]

Options:
  -n --dry-run       Dry run, \$?=1 if install/upgrade is required
  -q --quiet         Log only fatal errors
  -v --verbose       Output verbose logs and disable writing to the same line
  -g --global        Act globally
  -X --no-exec       Do not chmod +x the file (implies --no-bin)
  -B --no-bin        Do not link executables in package bin/ to .upkg/.bin
  -b --bin=PATH      Link specified executables or contents of specified
                     directory to .upkg/.bin (default: bin/)
  -t --pkgtype=TYPE  Explicitly set the package type (tar, file, or git)
  -p --pkgname=NAME  Override the package name link in .upkg/
"
# shellcheck disable=SC2317
# docopt parser below, refresh this parser with `docopt.sh upkg`
# shellcheck disable=2016,1090,1091,2034,2154
docopt() { source "$PKGROOT/.upkg/docopt-lib.sh" '1.0.0' || { ret=$?
printf -- "exit %d\n" "$ret"; exit "$ret"; }; set -e; trimmed_doc=${DOC:0:842}
usage=${DOC:36:166}; digest=5a05e; shorts=(-n -q -v -g -X -B -b -p -t)
longs=(--dry-run --quiet --verbose --global --no-exec --no-bin --bin --pkgname --pkgtype)
argcounts=(0 0 0 0 0 0 1 1 1); node_0(){ switch __dry_run 0; }; node_1(){
switch __quiet 1; }; node_2(){ switch __verbose 2; }; node_3(){
switch __global 3; }; node_4(){ switch __no_exec 4; }; node_5(){
switch __no_bin 5; }; node_6(){ value __bin 6 true; }; node_7(){
value __pkgname 7; }; node_8(){ value __pkgtype 8; }; node_9(){ value URL a; }
node_10(){ value PATH a; }; node_11(){ value SHA a; }; node_12(){
value PKGNAME a; }; node_13(){ value COLUMNOPTS a true; }; node_14(){
_command install; }; node_15(){ _command add; }; node_16(){ _command remove; }
node_17(){ _command list; }; node_18(){ _command __ --; }; node_19(){
optional 0 1 2; }; node_20(){ required 14 19; }; node_21(){ oneormore 6; }
node_22(){ optional 1 2 3 4 5 21 7 8; }; node_23(){ either 9 10; }; node_24(){
required 23; }; node_25(){ optional 11; }; node_26(){ required 15 22 24 25; }
node_27(){ optional 0 1 2 3; }; node_28(){ required 16 27 12; }; node_29(){
optional 1 2 3; }; node_30(){ oneormore 13; }; node_31(){ optional 18 30; }
node_32(){ required 17 29 31; }; node_33(){ either 20 26 28 32; }; node_34(){
required 33; }; cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2
printf "%s\n" "${DOC:36:166}" >&2; exit 1; }'; unset var___dry_run var___quiet \
var___verbose var___global var___no_exec var___no_bin var___bin var___pkgname \
var___pkgtype var_URL var_PATH var_SHA var_PKGNAME var_COLUMNOPTS var_install \
var_add var_remove var_list var___; parse 34 "$@"
local prefix=${DOCOPT_PREFIX:-''}; unset "${prefix}__dry_run" \
"${prefix}__quiet" "${prefix}__verbose" "${prefix}__global" \
"${prefix}__no_exec" "${prefix}__no_bin" "${prefix}__bin" "${prefix}__pkgname" \
"${prefix}__pkgtype" "${prefix}URL" "${prefix}PATH" "${prefix}SHA" \
"${prefix}PKGNAME" "${prefix}COLUMNOPTS" "${prefix}install" "${prefix}add" \
"${prefix}remove" "${prefix}list" "${prefix}__"
eval "${prefix}"'__dry_run=${var___dry_run:-false}'
eval "${prefix}"'__quiet=${var___quiet:-false}'
eval "${prefix}"'__verbose=${var___verbose:-false}'
eval "${prefix}"'__global=${var___global:-false}'
eval "${prefix}"'__no_exec=${var___no_exec:-false}'
eval "${prefix}"'__no_bin=${var___no_bin:-false}'
if declare -p var___bin >/dev/null 2>&1; then
eval "${prefix}"'__bin=("${var___bin[@]}")'; else eval "${prefix}"'__bin=()'; fi
eval "${prefix}"'__pkgname=${var___pkgname:-}'
eval "${prefix}"'__pkgtype=${var___pkgtype:-}'
eval "${prefix}"'URL=${var_URL:-}'; eval "${prefix}"'PATH=${var_PATH:-}'
eval "${prefix}"'SHA=${var_SHA:-}'; eval "${prefix}"'PKGNAME=${var_PKGNAME:-}'
if declare -p var_COLUMNOPTS >/dev/null 2>&1; then
eval "${prefix}"'COLUMNOPTS=("${var_COLUMNOPTS[@]}")'; else
eval "${prefix}"'COLUMNOPTS=()'; fi
eval "${prefix}"'install=${var_install:-false}'
eval "${prefix}"'add=${var_add:-false}'
eval "${prefix}"'remove=${var_remove:-false}'
eval "${prefix}"'list=${var_list:-false}'; eval "${prefix}"'__=${var___:-false}'
local docopt_i=1; [[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2
for ((;docopt_i>0;docopt_i--)); do declare -p "${prefix}__dry_run" \
"${prefix}__quiet" "${prefix}__verbose" "${prefix}__global" \
"${prefix}__no_exec" "${prefix}__no_bin" "${prefix}__bin" "${prefix}__pkgname" \
"${prefix}__pkgtype" "${prefix}URL" "${prefix}PATH" "${prefix}SHA" \
"${prefix}PKGNAME" "${prefix}COLUMNOPTS" "${prefix}install" "${prefix}add" \
"${prefix}remove" "${prefix}list" "${prefix}__"; done; }
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib.sh"' upkg`
  DOCOPT_PREFIX=_
  eval "$(docopt "$@")"

  source "$PKGROOT/lib/log.sh"
  source "$PKGROOT/lib/upkgjson.sh"
  source "$PKGROOT/lib/utils.sh"
  source "$PKGROOT/lib/download.sh"
  source "$PKGROOT/lib/list.sh"
  source "$PKGROOT/lib/install.sh"
  source "$PKGROOT/lib/remove.sh"
  source "$PKGROOT/lib/add.sh"

  if [[ -z $INSTALL_PREFIX ]]; then # Allow the user to override the path prefix when using the global (-g) switch
    # Otherwise switch based on the UID
    INSTALL_PREFIX=$HOME/.local
    [[ $EUID != 0 ]] || INSTALL_PREFIX=/usr/local
  fi

  if $___quiet && $___verbose; then
    fatal "--quiet and --verbose are mutually exclusive"
  fi

  DRY_RUN=false
  ! $___dry_run || DRY_RUN=true
  VERBOSE=false
  # shellcheck disable=SC2034
  ! $___verbose || VERBOSE=true
  QUIET=false
  # shellcheck disable=SC2034
  ! $___quiet || QUIET=true

  if $_install; then
    upkg_mktemp
    [[ -e "$PWD/upkg.json" ]] || fatal "No upkg.json found in '%s'" "$PWD"
    ln -sT "$PWD/upkg.json" ".upkg/.tmp/root/upkg.json"
    upkg_install "$PWD"
    if $DRY_RUN; then processing 'All dependencies are up-to-date'
    else processing 'Installed all dependencies'; fi
    trailing_newline

  elif $_add; then
    if $___global; then
      if [[ ! -e "$INSTALL_PREFIX/lib/upkg" ]]; then
        ! $DRY_RUN || fatal "'%s' does not exist" "$INSTALL_PREFIX/lib/upkg"
        mkdir -p "$INSTALL_PREFIX/lib/upkg"
      fi
      cd "$INSTALL_PREFIX/lib/upkg"
    fi
    if $___no_exec && $___no_bin; then
      docopt_exit "upkg: --no-exec implies --no-bin. Do not specify --no-bin"
    fi
    if $___no_bin; then
      [[ ${#___bin[@]} -eq 0 ]] || docopt_exit "upkg: --no-bin and --bin are mutually exclusive"
    fi
    local pkgtype=$___pkgtype
    if [[ -z $pkgtype ]]; then
      pkgtype=$(upkg_guess_pkgtype "$_URL" "$_SHA")
    fi
    if [[ $pkgtype = file ]]; then
      [[ ${#___bin[@]} -eq 0 ]] || docopt_exit "upkg: You cannot specify bin paths for a file. It will be linked by default, unless you use --no-exec."
    else
      ! $___no_exec || docopt_exit "upkg: --no-exec is only valid for files"
    fi
    if [[ $pkgtype = git ]]; then
      [[ -z $_SHA || $_SHA =~ ^[a-z0-9]{40}$ ]] || fatal "A git sha1 commit hash must be 40 hexchars"
    else
      [[ -z $_SHA || $_SHA =~ ^[a-z0-9]{64}$ ]] || fatal "A sha256 checksum must be 64 hexchars"
    fi

    upkg_mktemp
    upkg_add "$pkgtype" "$_URL" "$_SHA" "$(clean_pkgname "$___pkgname")" "$___no_exec" "$___no_bin" "${___bin[@]}"
    trailing_newline

  elif $_remove; then
    if $___global; then
      [[ -e "$INSTALL_PREFIX/lib/upkg" ]] || return 0
      cd "$INSTALL_PREFIX/lib/upkg"
    fi
    upkg_mktemp
    upkg_remove "$(clean_pkgname "$_PKGNAME")"
    trailing_newline

  elif $_list; then
    if $___global; then
      [[ -e "$INSTALL_PREFIX/lib/upkg" ]] || return 0
      cd "$INSTALL_PREFIX/lib/upkg"
    fi
    upkg_list "${COLUMNOPTS[@]}"

  else
    fatal "Not implemented"
  fi
}


upkg "$@"
