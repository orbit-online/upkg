#!/usr/bin/env bash
# shellcheck source-path=..
set -Eeo pipefail; shopt -s inherit_errexit nullglob

PKGROOT=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")

# variable name conventions
# pkgtype: The package type (tar, file, or git)
# pkgpath: The path to a package root
# pkgname: The effective name of a package in .upkg/
# dedup_path: The path to a deduplicated package as seen from .upkg/
# dedup_name: The name of a package in .upkg/.packages/
# dedup_pkgname: The name of a package without the @<checksum> part in .upkg/.packages/
# checksum: The sha1 (if pkgtype=git) or sha256 (otherwise) hash of the package
# archiveext: The extension of an archive including the starting dot. e.g. ".tar.gz"
# dep: The full JSON object for a dependency
# command: Basename of an executable file

# shellcheck disable=SC2154
upkg() {
  if [[ $BASH_VERSION =~ ^[0-3]|^4\.[0-3] ]]; then
    printf "upkg requires bash >= v4.4\n" >&2
    return 1
  fi
  export GIT_TERMINAL_PROMPT=0 GIT_SSH_COMMAND=${GIT_SSH_COMMAND:-"ssh -oBatchMode=yes"}

  DOC="Î¼pkg - A minimalist package manager
Usage:
  upkg install [-nqv]
  upkg add [-qvgfXB -b PATH... -p PKGNAME -t PKGTYPE] (URL|PATH) [SHA]
  upkg remove [-qnvg] PKGNAME
  upkg list [-qvg] [-- COLUMNOPTS...]
  upkg bundle [-qv -d PATH] -V VERSION [PATHS...]

Options:
  -n --dry-run         Dry run, \$?=1 if install is required
  -q --quiet           Log only fatal errors
  -v --verbose         Output verbose logs and disable writing to the same line
  -g --global          Act globally
  -f --force           Replace existing package with the same name
  -X --no-exec         Do not chmod +x the file (implies --no-bin)
  -B --no-bin          Do not link executables in package bin/ to .upkg/.bin
  -b --bin=PATH        Link specified executables or executables in specified
                       directory to .upkg/.bin (default: bin/)
  -t --pkgtype=TYPE    Explicitly set the package type (tar, file, or git)
  -p --pkgname=NAME    Override the package name link in .upkg/
  -d --dest=PATH       Package tarball destination (default: \$pkgname.tar.gz)
  -V --pkgver=VERSION  Version of the package that is being bundled
"
# shellcheck disable=SC2317
# docopt parser below, refresh this parser with `docopt.sh upkg`
# shellcheck disable=2016,2086,2317,1090,1091,2034,2154
docopt() { source "$PKGROOT/.upkg/docopt-lib.sh/docopt-lib.sh" '2.0.0' || {
ret=$?;printf -- "exit %d\n" "$ret";exit "$ret";};set -e
trimmed_doc=${DOC:0:1121};usage=${DOC:36:217};digest=45a77;options=('-n --dry-'\
'run 0' '-q --quiet 0' '-v --verbose 0' '-g --global 0' '-f --force 0' '-X --n'\
'o-exec 0' '-B --no-bin 0' '-b --bin 1' '-p --pkgname 1' '-t --pkgtype 1' '-d '\
'--dest 1' '-V --pkgver 1');node_0(){ switch __dry_run 0;};node_1(){ switch \
__quiet 1;};node_2(){ switch __verbose 2;};node_3(){ switch __global 3;}
node_4(){ switch __force 4;};node_5(){ switch __no_exec 5;};node_6(){ switch \
__no_bin 6;};node_7(){ value __bin 7 true;};node_8(){ value __pkgname 8;}
node_9(){ value __pkgtype 9;};node_10(){ value __dest 10;};node_11(){ value \
__pkgver 11;};node_12(){ value URL a;};node_13(){ value PATH a;};node_14(){
value SHA a;};node_15(){ value PKGNAME a;};node_16(){ value COLUMNOPTS a true;}
node_17(){ value PATHS a true;};node_18(){ switch install a:install;};node_19(){
switch add a:add;};node_20(){ switch remove a:remove;};node_21(){ switch list \
a:list;};node_22(){ switch bundle a:bundle;};node_23(){ switch __ a:--;}
node_24(){ sequence 18 25;};node_25(){ optional 0 1 2;};node_26(){ sequence 19 \
27 29 30;};node_27(){ optional 1 2 3 4 5 6 28 8 9;};node_28(){ repeatable 7;}
node_29(){ choice 12 13;};node_30(){ optional 14;};node_31(){ sequence 20 32 15
};node_32(){ optional 1 0 2 3;};node_33(){ sequence 21 34 35;};node_34(){
optional 1 2 3;};node_35(){ optional 23 36;};node_36(){ repeatable 16;}
node_37(){ sequence 22 38 11 39;};node_38(){ optional 1 2 10;};node_39(){
optional 40;};node_40(){ repeatable 17;};node_41(){ choice 24 26 31 33 37;}
cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" \
"${DOC:36:217}" >&2;exit 1;}';local varnames=(__dry_run __quiet __verbose \
__global __force __no_exec __no_bin __bin __pkgname __pkgtype __dest __pkgver \
URL PATH SHA PKGNAME COLUMNOPTS PATHS install add remove list bundle __) varname
for varname in "${varnames[@]}"; do unset "var_$varname";done;parse 41 "$@"
local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset \
"$p$varname";done;if declare -p var___bin >/dev/null 2>&1; then eval $p'__bin='\
'("${var___bin[@]}")';else eval $p'__bin=()';fi;if declare -p var_COLUMNOPTS \
>/dev/null 2>&1; then eval $p'COLUMNOPTS=("${var_COLUMNOPTS[@]}")';else eval \
$p'COLUMNOPTS=()';fi;if declare -p var_PATHS >/dev/null 2>&1; then eval $p'PAT'\
'HS=("${var_PATHS[@]}")';else eval $p'PATHS=()';fi;eval $p'__dry_run=${var___d'\
'ry_run:-false};'$p'__quiet=${var___quiet:-false};'$p'__verbose=${var___verbos'\
'e:-false};'$p'__global=${var___global:-false};'$p'__force=${var___force:-fals'\
'e};'$p'__no_exec=${var___no_exec:-false};'$p'__no_bin=${var___no_bin:-false};'\
$p'__pkgname=${var___pkgname:-};'$p'__pkgtype=${var___pkgtype:-};'$p'__dest=${'\
'var___dest:-};'$p'__pkgver=${var___pkgver:-};'$p'URL=${var_URL:-};'$p'PATH=${'\
'var_PATH:-};'$p'SHA=${var_SHA:-};'$p'PKGNAME=${var_PKGNAME:-};'$p'install=${v'\
'ar_install:-false};'$p'add=${var_add:-false};'$p'remove=${var_remove:-false};'\
$p'list=${var_list:-false};'$p'bundle=${var_bundle:-false};'$p'__=${var___:-fa'\
'lse};';local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2;for \
((;docopt_i>0;docopt_i--)); do for varname in "${varnames[@]}"; do declare -p \
"$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$PKGROOT/.upkg/docopt-lib.sh/docopt-lib.sh"' upkg`
  DOCOPT_PREFIX=_
  eval "$(docopt "$@")"

  source "$PKGROOT/lib/log.sh"
  source "$PKGROOT/lib/upkgjson.sh"
  source "$PKGROOT/lib/utils.sh"
  source "$PKGROOT/lib/download.sh"
  source "$PKGROOT/lib/list.sh"
  source "$PKGROOT/lib/install.sh"
  source "$PKGROOT/lib/remove.sh"
  source "$PKGROOT/lib/add.sh"
  source "$PKGROOT/lib/bundle.sh"

  # Make sure we have jq available, git and tar are optional and we let them fail once we get there
  type "jq" >/dev/null 2>&1 || fatal "command not found: 'jq'"

  if [[ -z $INSTALL_PREFIX ]]; then # Allow the user to override the path prefix when using the global (-g) switch
    # Otherwise switch based on the UID
    INSTALL_PREFIX=$HOME/.local
    [[ $EUID != 0 ]] || INSTALL_PREFIX=/usr/local
  fi

  if $___quiet && $___verbose; then
    fatal "--quiet and --verbose are mutually exclusive"
  fi

  DRY_RUN=false
  ! $___dry_run || DRY_RUN=true
  VERBOSE=false
  # shellcheck disable=SC2034
  ! $___verbose || VERBOSE=true
  QUIET=false
  # shellcheck disable=SC2034
  ! $___quiet || QUIET=true

  if $_install; then
    [[ -e "$PWD/upkg.json" ]] || fatal "No upkg.json found in '%s'" "$PWD"
    upkg_mktemp
    ln -sT "$PWD/upkg.json" ".upkg/.tmp/root/upkg.json"
    upkg_install "$PWD"
    if $DRY_RUN; then completed 'All dependencies are up-to-date'
    else completed 'Installed all dependencies'; fi

  elif $_add; then
    if $___global; then
      [[ -e "$INSTALL_PREFIX/lib/upkg" ]] || mkdir -p "$INSTALL_PREFIX/lib/upkg"
      [[ ! -e $_URL ]] || _URL=$(realpath "$_URL") # Make sure we have an absolute path before changing directories
      cd "$INSTALL_PREFIX/lib/upkg"
    fi
    if $___no_bin; then
      ! $___no_exec || docopt_exit "upkg: --no-exec implies --no-bin. Do not specify --no-bin"
      [[ ${#___bin[@]} -eq 0 ]] || docopt_exit "upkg: --no-bin and --bin are mutually exclusive"
    fi
    local pkgtype
    pkgtype=${___pkgtype:-$(upkg_guess_pkgtype "$_URL" "$_SHA")}
    if [[ $pkgtype = file ]]; then
      [[ ${#___bin[@]} -eq 0 ]] || docopt_exit "upkg: You cannot specify bin paths for a file. It will be linked by default, unless you use --no-exec."
    else
      ! $___no_exec || docopt_exit "upkg: --no-exec is only valid for files"
    fi
    if [[ $pkgtype = git ]]; then
      [[ -z $_SHA || $_SHA =~ ^[a-z0-9]{40}$ ]] || fatal "A git sha1 commit hash must be 40 hexchars"
    else
      [[ -z $_SHA || $_SHA =~ ^[a-z0-9]{64}$ ]] || fatal "A sha256 checksum must be 64 hexchars"
    fi

    if $___force; then
      # dry-run an install to check if upkg.json is in sync with .upkg/
      local ret=0
      set +e; (
        set -e
        # shellcheck disable=SC2034
        DRY_RUN=true
        upkg_mktemp
        ln -sT "$PWD/upkg.json" ".upkg/.tmp/root/upkg.json"
        upkg_install 2>/dev/null
      ); ret=$?; set -e
      [[ $ret -eq 0 ]] || fatal "Unable to --force replace with '%s'. upkg.json is not in sync with .upkg/" "$_URL"
    fi

    upkg_mktemp
    upkg_add "$pkgtype" "$_URL" "$_SHA" "$(clean_pkgname "$___pkgname")" "$___no_exec" "$___no_bin" "$___force" "${___bin[@]}"
    completed "Added '%s'" "$_URL"

  elif $_remove; then
    if $___global; then
      if ! [[ -e "$INSTALL_PREFIX/lib/upkg" ]]; then
        completed "'%s' is not installed" "$_PKGNAME"
        return 0
      fi
      cd "$INSTALL_PREFIX/lib/upkg"
    fi
    if [[ ! -e upkg.json && ! -e .upkg ]]; then
      completed "'%s' is not installed" "$_PKGNAME"
      return 0
    fi
    # dry-run an install to check if upkg.json is in sync with .upkg/
    local ret=0
    set +e; (
      set -e
      # shellcheck disable=SC2030
      DRY_RUN=true
      upkg_mktemp
      ln -sT "$PWD/upkg.json" ".upkg/.tmp/root/upkg.json"
      upkg_install 2>/dev/null
    ); ret=$?; set -e

    local pkgname
    pkgname=$(clean_pkgname "$_PKGNAME")

    # shellcheck disable=SC2031
    if [[ $ret -eq 0 ]]; then
      if [[ ! -e .upkg/$pkgname ]]; then
        completed "'%s' is not installed" "$_PKGNAME"
        return 0
      fi
    else
      fatal "Unable to remove '%s'. upkg.json is not in sync with .upkg/" "$_PKGNAME"
    fi
    upkg_mktemp
    upkg_remove "$pkgname"

  elif $_list; then
    if $___global; then
      [[ -e "$INSTALL_PREFIX/lib/upkg" ]] || return 0
      cd "$INSTALL_PREFIX/lib/upkg"
    fi
    upkg_list "${_COLUMNOPTS[@]}"

  elif $_bundle; then
    [[ -e "$PWD/upkg.json" ]] || fatal "No upkg.json found in '%s'" "$PWD"
    local asset_path
    for asset_path in "${_PATHS[@]}"; do
      [[ $asset_path != upkg.json ]] || fatal "You must not specify upkg.json in PATHS"
      [[ $asset_path != .upkg && $asset_path != .upkg/* ]] || fatal ".upkg may not be included in the package"
    done
    if [[ -z $___dest ]]; then
      ___dest=$(jq -re '.name // empty' upkg.json).tar.gz || fatal "Unable to determine package name"
    fi
    upkg_mktemp
    upkg_bundle "$___pkgver" "$___dest" "${_PATHS[@]}"
    completed "Î¼pkg package tarball was successfully created at '%s'" "$___dest"

  else
    fatal "Not implemented"
  fi
}


upkg "$@"
